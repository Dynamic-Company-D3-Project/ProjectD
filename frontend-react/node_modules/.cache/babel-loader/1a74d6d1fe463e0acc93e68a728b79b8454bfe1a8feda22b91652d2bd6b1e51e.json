{"ast":null,"code":"var _jsxFileName = \"B:\\\\Sunbeam\\\\projectDCompany\\\\NewGitClone\\\\ProjectD\\\\frontend-react\\\\src\\\\Admin\\\\cards\\\\AdminChart.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { Card } from \"react-bootstrap\";\n\n// Register the necessary scales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n// const data = {\n//   labels: [\n//     \"Sunday\",\n//     \"Monday\",\n//     \"Tuesday\",\n//     \"Wednesday\",\n//     \"Thursday\",\n//     \"Friday\",\n//     \"Saturday\",\n//   ],\n//   datasets: [\n//     {\n//       label: \"Orders per Day\",\n//       data: [12, 19, 3, 5, 2, 3, 9],\n//       fill: false,\n//       backgroundColor: \"rgb(75, 192, 192)\",\n//       borderColor: \"rgba(75, 192, 192, 1)\",\n//     },\n//   ],\n// };\n\n// const options = {\n//   scales: {\n//     y: {\n//       beginAtZero: true,\n//     },\n//   },\n// };\n\n// const AdminChart = () => {\n//   return (\n//     <Card style={{ opacity: \"0.7\" }}>\n//       <Card.Body>\n//         <Card.Title className=\"fw-bold\">Orders per Day</Card.Title>\n//         <Line data={data} options={options} />\n//       </Card.Body>\n//     </Card>\n//   );\n// };\n\n// export default AdminChart;\n\nconst AdminChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    // Dates for the X-axis\n    datasets: [{\n      label: \"Orders per Day\",\n      data: [],\n      // Total orders for the Y-axis\n      fill: false,\n      backgroundColor: \"rgb(75, 192, 192)\",\n      borderColor: \"rgba(75, 192, 192, 1)\"\n    }]\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\"/api/orders/daily\"); // Replace with your actual API endpoint\n        const data = response.data;\n\n        // Transform data into chart-friendly format\n        const labels = data.map(item => item.Date);\n        const ordersData = data.map(item => item.TotalOrders);\n        setChartData({\n          labels: labels,\n          datasets: [{\n            label: \"Orders per Day\",\n            data: ordersData,\n            fill: false,\n            backgroundColor: \"rgb(75, 192, 192)\",\n            borderColor: \"rgba(75, 192, 192, 1)\"\n          }]\n        });\n      } catch (error) {\n        console.error(\"Error fetching data\", error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures this runs only once on component mount\n\n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      opacity: \"0.7\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        className: \"fw-bold\",\n        children: \"Orders per Day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminChart, \"0NiZijajYREEakcgpHfRjGWGvcc=\");\n_c = AdminChart;\nexport default AdminChart;\nvar _c;\n$RefreshReg$(_c, \"AdminChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Card","jsxDEV","_jsxDEV","register","AdminChart","_s","chartData","setChartData","useState","labels","datasets","label","data","fill","backgroundColor","borderColor","useEffect","fetchData","response","axios","get","map","item","Date","ordersData","TotalOrders","error","console","options","scales","y","beginAtZero","style","opacity","children","Body","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["B:/Sunbeam/projectDCompany/NewGitClone/ProjectD/frontend-react/src/Admin/cards/AdminChart.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\n// Register the necessary scales\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n// const data = {\r\n//   labels: [\r\n//     \"Sunday\",\r\n//     \"Monday\",\r\n//     \"Tuesday\",\r\n//     \"Wednesday\",\r\n//     \"Thursday\",\r\n//     \"Friday\",\r\n//     \"Saturday\",\r\n//   ],\r\n//   datasets: [\r\n//     {\r\n//       label: \"Orders per Day\",\r\n//       data: [12, 19, 3, 5, 2, 3, 9],\r\n//       fill: false,\r\n//       backgroundColor: \"rgb(75, 192, 192)\",\r\n//       borderColor: \"rgba(75, 192, 192, 1)\",\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// const options = {\r\n//   scales: {\r\n//     y: {\r\n//       beginAtZero: true,\r\n//     },\r\n//   },\r\n// };\r\n\r\n// const AdminChart = () => {\r\n//   return (\r\n//     <Card style={{ opacity: \"0.7\" }}>\r\n//       <Card.Body>\r\n//         <Card.Title className=\"fw-bold\">Orders per Day</Card.Title>\r\n//         <Line data={data} options={options} />\r\n//       </Card.Body>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// export default AdminChart;\r\n\r\nconst AdminChart = () => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [], // Dates for the X-axis\r\n    datasets: [\r\n      {\r\n        label: \"Orders per Day\",\r\n        data: [], // Total orders for the Y-axis\r\n        fill: false,\r\n        backgroundColor: \"rgb(75, 192, 192)\",\r\n        borderColor: \"rgba(75, 192, 192, 1)\",\r\n      },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(\"/api/orders/daily\"); // Replace with your actual API endpoint\r\n        const data = response.data;\r\n\r\n        // Transform data into chart-friendly format\r\n        const labels = data.map(item => item.Date);\r\n        const ordersData = data.map(item => item.TotalOrders);\r\n\r\n        setChartData({\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: \"Orders per Day\",\r\n              data: ordersData,\r\n              fill: false,\r\n              backgroundColor: \"rgb(75, 192, 192)\",\r\n              borderColor: \"rgba(75, 192, 192, 1)\",\r\n            },\r\n          ],\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error fetching data\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array ensures this runs only once on component mount\r\n\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Card style={{ opacity: \"0.7\" }}>\r\n      <Card.Body>\r\n        <Card.Title className=\"fw-bold\">Orders per Day</Card.Title>\r\n        <Line data={chartData} options={options} />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AdminChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}